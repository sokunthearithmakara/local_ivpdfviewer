{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * PDF viewer\n *\n * @module     local_ivpdfviewer/main\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Iframe from 'ivplugin_iframe/main';\n\nexport default class PdfViewer extends Iframe {\n    /**\n     * Renders the container for the given annotation.\n     *\n     * @param {Object} annotation - The annotation object.\n     * @param {string} annotation.id - The ID of the annotation.\n     */\n    renderContainer(annotation) {\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        $message.addClass(\"hasiframe\");\n        super.renderContainer(annotation);\n    }\n\n    /**\n     * Renders the content for the given annotation.\n     * @param {Object} annotation - The annotation object.\n     * @returns {Promise} - The promise object representing the content rendering.\n     */\n    async applyContent(annotation) {\n        let self = this;\n        let adv = JSON.parse(annotation.advanced);\n        /**\n         * Monitors a PDF viewer within an iframe and toggles completion status based on the number of pages viewed.\n         *\n         * @param {Object} annotation - The annotation object containing the ID and completion status.\n         * @param {string} log - The log data for the annotation.\n         * @param {boolean} getLog - Flag indicating whether to retrieve the log.\n         * @returns {void}\n         */\n        const pdfCheck = (annotation, log, getLog) => {\n            const checkIframe = () => {\n                const iframe = document.querySelector(`#message[data-id='${annotation.id}'] iframe`);\n                let pdf;\n                try {\n                    pdf = iframe.contentWindow.PDFViewerApplication.pdfViewer;\n                } catch (e) {\n                    pdf = null;\n                }\n                if (pdf && pdf.pagesCount > 0) {\n                    window.pdf = pdf;\n                    let pageToDisplay = annotation.char1; // Format 1-3,10.\n                    // Let's build an array of pages to display.\n                    let pages = [];\n                    if (pageToDisplay && pageToDisplay !== \"\") {\n                        pages = pageToDisplay.split(\",\").map((page) => {\n                            let range = page.split(\"-\");\n                            if (range.length > 1) {\n                                return Array.from({length: range[1] - range[0] + 1}, (_, i) => i + parseInt(range[0]));\n                            } else {\n                                return parseInt(page);\n                            }\n                        }).flat();\n                    } else {\n                        pages = Array.from({length: pdf.pagesCount}, (_, i) => i + 1);\n                    }\n                    // Get the pages to remove.\n                    let pagesToRemove = [];\n                    for (let i = 1; i <= pdf.pagesCount; i++) {\n                        if (!pages.includes(i)) {\n                            pagesToRemove.push(i);\n                        }\n                    }\n                    const lastPage = Math.max(...pages);\n                    pdf.eventBus.on(\"pagesloaded\", function() {\n                        let windowDocument = iframe.contentWindow.document;\n                        if (adv.hidetools) {\n                            let toolbar = windowDocument.querySelectorAll(`#toolbarViewerRight > *:not(#secondaryToolbarToggle),\n                                 #secondaryOpenFile, #secondaryPrint, #secondaryDownload`);\n                            if (toolbar.length > 0) {\n                                toolbar.forEach((element) => {\n                                    element.remove();\n                                });\n                            }\n                        }\n                        pagesToRemove.forEach((page) => {\n                            let pageElement = windowDocument.querySelector(`.page[data-page-number='${page}']`);\n                            if (pageElement) {\n                                pageElement.style.height = \"0\";\n                                pageElement.style.margin = \"0\";\n                                pageElement.style.border = \"0\";\n                                $(pageElement).empty();\n                            }\n                            let thumbnailElement = windowDocument.querySelector(`.thumbnail[data-page-number='${page}']`);\n                            if (thumbnailElement) {\n                                thumbnailElement.style.height = \"0\";\n                                thumbnailElement.style.margin = \"0\";\n                                thumbnailElement.style.border = \"0\";\n                                thumbnailElement.style.overflow = \"hidden\";\n                                // Hide <a> parent.\n                                let parent = thumbnailElement.parentElement;\n                                if (parent) {\n                                    parent.style.display = \"none\";\n                                }\n                            }\n                        });\n                    });\n\n                    if (log != '') { // Log is the last page viewed.\n                        pdf.currentPageNumber = Number(log);\n                    }\n\n                    if (getLog) {\n                        $(document).on('interactionclose interactionrefresh', async function(e) {\n                            if (e.detail.annotation.id == annotation.id) {\n                                try {\n                                    let page = window.pdf.currentPageNumber;\n                                    await self.saveLog(annotation, {\n                                        text1: page,\n                                        char1: annotation.type,\n                                    }, self.userid, true);\n                                } catch (e) {\n                                    window.console.log('Error: ', e);\n                                }\n                            }\n                        });\n                    }\n\n                    if (self.isEditMode()) {\n                        return;\n                    }\n\n                    if ((pdf.pagesCount === 1 || pdf._pages.length === 1 || pages.length <= 1)\n                        && !annotation.completed && annotation.completiontracking == 'scrolltolastpage') { // Only one page.\n                        self.toggleCompletion(annotation.id, \"mark-done\", \"automatic\");\n                    } else {\n                        pdf.eventBus.on(\"pagechanging\", function(e) {\n                            if (!annotation.completed && annotation.completiontracking == 'scrolltolastpage') {\n                                if (e.pageNumber == lastPage && !annotation.completed) {\n                                    self.toggleCompletion(annotation.id, \"mark-done\", \"automatic\");\n                                    annotation.completed = true;\n                                }\n                            }\n                        });\n                    }\n                } else {\n                    requestAnimationFrame(checkIframe);\n                }\n            };\n            requestAnimationFrame(checkIframe);\n        };\n\n        // We don't need to run the render method every time the content is applied. We can cache the content.\n        if (!self.cache[annotation.id] || self.isEditMode()) {\n            self.cache[annotation.id] = await this.render(annotation, 'html');\n        }\n        const data = self.cache[annotation.id];\n\n        $(`#message[data-id='${annotation.id}'] .modal-body`).attr('id', 'content').html(data).fadeIn(300);\n        this.postContentRender(annotation);\n        if (self.isEditMode()) {\n            pdfCheck(annotation, '', false);\n            return;\n        }\n        let log = '';\n        let getLog = false;\n        if (adv.savepagebefore && adv.savepagebefore != 0 && annotation.completed == false) {\n            getLog = true;\n        }\n        if (adv.savepageafter && adv.savepageafter != 0 && annotation.completed == true) {\n            getLog = true;\n        }\n        if (getLog) {\n            log = await self.getLogs(annotation, [self.userid]);\n            if (log.length > 0) {\n                log = log[0].text1;\n            }\n        }\n        pdfCheck(annotation, log, getLog);\n        if (annotation.hascompletion == 0 || annotation.completed) {\n            return;\n        }\n        if (annotation.completiontracking == 'view') {\n            this.toggleCompletion(annotation.id, \"mark-done\", \"automatic\");\n            return;\n        }\n    }\n}"],"names":["PdfViewer","Iframe","renderContainer","annotation","id","addClass","self","this","adv","JSON","parse","advanced","pdfCheck","log","getLog","checkIframe","iframe","document","querySelector","pdf","contentWindow","PDFViewerApplication","pdfViewer","e","pagesCount","window","pageToDisplay","char1","pages","split","map","page","range","length","Array","from","_","i","parseInt","flat","pagesToRemove","includes","push","lastPage","Math","max","eventBus","on","windowDocument","hidetools","toolbar","querySelectorAll","forEach","element","remove","pageElement","style","height","margin","border","empty","thumbnailElement","overflow","parent","parentElement","display","currentPageNumber","Number","async","detail","saveLog","text1","type","userid","console","isEditMode","_pages","completed","completiontracking","toggleCompletion","pageNumber","requestAnimationFrame","cache","render","data","attr","html","fadeIn","postContentRender","savepagebefore","savepageafter","getLogs","hascompletion"],"mappings":"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"}